{
  "contractName": "IPoolMemberNFT",
  "abi": [
    {
      "inputs": [],
      "name": "POOL_MEMBER_NFT_HAS_UNITS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "POOL_MEMBER_NFT_NO_UNITS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "POOL_MEMBER_NFT_NO_ZERO_MEMBER",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "POOL_MEMBER_NFT_NO_ZERO_POOL",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "POOL_NFT_APPROVE_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "POOL_NFT_APPROVE_TO_CALLER",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "POOL_NFT_APPROVE_TO_CURRENT_OWNER",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "POOL_NFT_INVALID_TOKEN_ID",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "POOL_NFT_NOT_REGISTERED_POOL",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "POOL_NFT_ONLY_SUPER_TOKEN_FACTORY",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "POOL_NFT_TRANSFER_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "POOL_NFT_TRANSFER_NOT_ALLOWED",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "MetadataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "nftName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "nftSymbol",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "triggerMetadataUpdate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "onCreate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "onUpdate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "onDelete",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "poolMemberDataByTokenId",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "member",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "units",
              "type": "uint128"
            }
          ],
          "internalType": "struct IPoolMemberNFT.PoolMemberNFTData",
          "name": "data",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"POOL_MEMBER_NFT_HAS_UNITS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"POOL_MEMBER_NFT_NO_UNITS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"POOL_MEMBER_NFT_NO_ZERO_MEMBER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"POOL_MEMBER_NFT_NO_ZERO_POOL\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"POOL_NFT_APPROVE_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"POOL_NFT_APPROVE_TO_CALLER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"POOL_NFT_APPROVE_TO_CURRENT_OWNER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"POOL_NFT_INVALID_TOKEN_ID\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"POOL_NFT_NOT_REGISTERED_POOL\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"POOL_NFT_ONLY_SUPER_TOKEN_FACTORY\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"POOL_NFT_TRANSFER_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"POOL_NFT_TRANSFER_NOT_ALLOWED\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"nftName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"nftSymbol\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"onCreate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"onDelete\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"onUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"poolMemberDataByTokenId\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"units\",\"type\":\"uint128\"}],\"internalType\":\"struct IPoolMemberNFT.PoolMemberNFTData\",\"name\":\"data\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"triggerMetadataUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"MetadataUpdate(uint256)\":{\"details\":\"This event comes from https://eips.ethereum.org/EIPS/eip-4906\",\"params\":{\"tokenId\":\"the id of the token that should have its metadata updated\"}},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"getTokenId(address,address)\":{\"details\":\"For PoolAdminNFT, `account` is admin and for PoolMemberNFT, `account` is member\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"POOL_MEMBER_NFT_NO_ZERO_POOL()\":[{\"notice\":\"Errors ///\"}]},\"events\":{\"MetadataUpdate(uint256)\":{\"notice\":\"Informs third-party platforms that NFT metadata should be updated\"}},\"kind\":\"user\",\"methods\":{\"getTokenId(address,address)\":{\"notice\":\"Gets the token id\"},\"poolMemberDataByTokenId(uint256)\":{\"notice\":\"View Functions ///\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/contracts/interfaces/agreements/gdav1/IPoolMemberNFT.sol\":\"IPoolMemberNFT\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e66dfde185df46104c11bc89d08fa0760737aa59a2b8546a656473d810a8ea4\",\"dweb:/ipfs/QmXvyqtXPaPss2PD7eqPoSao5Szm2n6UMoiG8TZZDjmChR\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146\",\"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"project:/contracts/interfaces/agreements/gdav1/IPoolMemberNFT.sol\":{\"keccak256\":\"0x5a52452b00db96398759f1a2017ed8d76390730cb16a0d3e143b1fc7c5b99bed\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9f3a7c1f327fde03f63058d196f48472f69c0314e77214c6d3661f4b1b85ff99\",\"dweb:/ipfs/Qmf8mJJnPqDPqmDKiofqEhrDFwo9d4zWt5NsToqSH5F6mL\"]},\"project:/contracts/interfaces/agreements/gdav1/IPoolNFTBase.sol\":{\"keccak256\":\"0x1e5604256c5dd52f969b46feea0d708bde11c1a481bf7c50e33c67fd5dbf4262\",\"license\":\"AGPLv3\",\"urls\":[\"bzz-raw://6c7c6c57094abc70ef32b2844b9df403e2c0ca7cee57a90f87038f2f071f7683\",\"dweb:/ipfs/QmSfBSuh3LWKJ3CcfPkVVnxy4uUsaXhgFMU1X7CA5Ym7wS\"]}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.11;\n\nimport { IPoolNFTBase } from \"./IPoolNFTBase.sol\";\n\ninterface IPoolMemberNFT is IPoolNFTBase {\n    // PoolMemberNFTData struct storage packing:\n    // b = bits\n    // WORD 1: | pool   | FREE\n    //         | 160b   | 96b\n    // WORD 2: | member | FREE\n    //         | 160b   | 96b\n    // WORD 3: | units  | FREE\n    //         | 128b   | 128b\n    struct PoolMemberNFTData {\n        address pool;\n        address member;\n        uint128 units;\n    }\n\n    /// Errors ///\n\n    error POOL_MEMBER_NFT_NO_ZERO_POOL();\n    error POOL_MEMBER_NFT_NO_ZERO_MEMBER();\n    error POOL_MEMBER_NFT_NO_UNITS();\n    error POOL_MEMBER_NFT_HAS_UNITS();\n\n    function onCreate(address pool, address member) external;\n\n    function onUpdate(address pool, address member) external;\n\n    function onDelete(address pool, address member) external;\n\n    /// View Functions ///\n\n    function poolMemberDataByTokenId(uint256 tokenId) external view returns (PoolMemberNFTData memory data);\n}",
  "sourcePath": "/home/runner/work/protocol-monorepo/protocol-monorepo/packages/ethereum-contracts/contracts/interfaces/agreements/gdav1/IPoolMemberNFT.sol",
  "ast": {
    "absolutePath": "project:/contracts/interfaces/agreements/gdav1/IPoolMemberNFT.sol",
    "exportedSymbols": {
      "IPoolMemberNFT": [
        36770
      ],
      "IPoolNFTBase": [
        36820
      ]
    },
    "id": 36771,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 36719,
        "literals": [
          "solidity",
          ">=",
          "0.8",
          ".11"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:25:68"
      },
      {
        "absolutePath": "project:/contracts/interfaces/agreements/gdav1/IPoolNFTBase.sol",
        "file": "./IPoolNFTBase.sol",
        "id": 36721,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 36771,
        "sourceUnit": 36821,
        "src": "59:50:68",
        "symbolAliases": [
          {
            "foreign": {
              "id": 36720,
              "name": "IPoolNFTBase",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 36820,
              "src": "68:12:68",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 36722,
              "name": "IPoolNFTBase",
              "nameLocations": [
                "139:12:68"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 36820,
              "src": "139:12:68"
            },
            "id": 36723,
            "nodeType": "InheritanceSpecifier",
            "src": "139:12:68"
          }
        ],
        "canonicalName": "IPoolMemberNFT",
        "contractDependencies": [],
        "contractKind": "interface",
        "fullyImplemented": false,
        "id": 36770,
        "linearizedBaseContracts": [
          36770,
          36820,
          2800,
          2773,
          4657
        ],
        "name": "IPoolMemberNFT",
        "nameLocation": "121:14:68",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "canonicalName": "IPoolMemberNFT.PoolMemberNFTData",
            "id": 36730,
            "members": [
              {
                "constant": false,
                "id": 36725,
                "mutability": "mutable",
                "name": "pool",
                "nameLocation": "450:4:68",
                "nodeType": "VariableDeclaration",
                "scope": 36730,
                "src": "442:12:68",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 36724,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "442:7:68",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 36727,
                "mutability": "mutable",
                "name": "member",
                "nameLocation": "472:6:68",
                "nodeType": "VariableDeclaration",
                "scope": 36730,
                "src": "464:14:68",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 36726,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "464:7:68",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 36729,
                "mutability": "mutable",
                "name": "units",
                "nameLocation": "496:5:68",
                "nodeType": "VariableDeclaration",
                "scope": 36730,
                "src": "488:13:68",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint128",
                  "typeString": "uint128"
                },
                "typeName": {
                  "id": 36728,
                  "name": "uint128",
                  "nodeType": "ElementaryTypeName",
                  "src": "488:7:68",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint128",
                    "typeString": "uint128"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "PoolMemberNFTData",
            "nameLocation": "414:17:68",
            "nodeType": "StructDefinition",
            "scope": 36770,
            "src": "407:101:68",
            "visibility": "public"
          },
          {
            "documentation": {
              "id": 36731,
              "nodeType": "StructuredDocumentation",
              "src": "514:15:68",
              "text": "Errors ///"
            },
            "errorSelector": "8192c9c8",
            "id": 36733,
            "name": "POOL_MEMBER_NFT_NO_ZERO_POOL",
            "nameLocation": "540:28:68",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 36732,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "568:2:68"
            },
            "src": "534:37:68"
          },
          {
            "errorSelector": "962c2710",
            "id": 36735,
            "name": "POOL_MEMBER_NFT_NO_ZERO_MEMBER",
            "nameLocation": "582:30:68",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 36734,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "612:2:68"
            },
            "src": "576:39:68"
          },
          {
            "errorSelector": "ea1a8d60",
            "id": 36737,
            "name": "POOL_MEMBER_NFT_NO_UNITS",
            "nameLocation": "626:24:68",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 36736,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "650:2:68"
            },
            "src": "620:33:68"
          },
          {
            "errorSelector": "067aab17",
            "id": 36739,
            "name": "POOL_MEMBER_NFT_HAS_UNITS",
            "nameLocation": "664:25:68",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 36738,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "689:2:68"
            },
            "src": "658:34:68"
          },
          {
            "functionSelector": "f1391f73",
            "id": 36746,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "onCreate",
            "nameLocation": "707:8:68",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 36744,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 36741,
                  "mutability": "mutable",
                  "name": "pool",
                  "nameLocation": "724:4:68",
                  "nodeType": "VariableDeclaration",
                  "scope": 36746,
                  "src": "716:12:68",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 36740,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "716:7:68",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 36743,
                  "mutability": "mutable",
                  "name": "member",
                  "nameLocation": "738:6:68",
                  "nodeType": "VariableDeclaration",
                  "scope": 36746,
                  "src": "730:14:68",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 36742,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "730:7:68",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "715:30:68"
            },
            "returnParameters": {
              "id": 36745,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "754:0:68"
            },
            "scope": 36770,
            "src": "698:57:68",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "functionSelector": "0447a2cd",
            "id": 36753,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "onUpdate",
            "nameLocation": "770:8:68",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 36751,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 36748,
                  "mutability": "mutable",
                  "name": "pool",
                  "nameLocation": "787:4:68",
                  "nodeType": "VariableDeclaration",
                  "scope": 36753,
                  "src": "779:12:68",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 36747,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "779:7:68",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 36750,
                  "mutability": "mutable",
                  "name": "member",
                  "nameLocation": "801:6:68",
                  "nodeType": "VariableDeclaration",
                  "scope": 36753,
                  "src": "793:14:68",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 36749,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "793:7:68",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "778:30:68"
            },
            "returnParameters": {
              "id": 36752,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "817:0:68"
            },
            "scope": 36770,
            "src": "761:57:68",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "functionSelector": "b62b3646",
            "id": 36760,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "onDelete",
            "nameLocation": "833:8:68",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 36758,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 36755,
                  "mutability": "mutable",
                  "name": "pool",
                  "nameLocation": "850:4:68",
                  "nodeType": "VariableDeclaration",
                  "scope": 36760,
                  "src": "842:12:68",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 36754,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "842:7:68",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 36757,
                  "mutability": "mutable",
                  "name": "member",
                  "nameLocation": "864:6:68",
                  "nodeType": "VariableDeclaration",
                  "scope": 36760,
                  "src": "856:14:68",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 36756,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "856:7:68",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "841:30:68"
            },
            "returnParameters": {
              "id": 36759,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "880:0:68"
            },
            "scope": 36770,
            "src": "824:57:68",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 36761,
              "nodeType": "StructuredDocumentation",
              "src": "887:23:68",
              "text": "View Functions ///"
            },
            "functionSelector": "3bda0594",
            "id": 36769,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "poolMemberDataByTokenId",
            "nameLocation": "924:23:68",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 36764,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 36763,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nameLocation": "956:7:68",
                  "nodeType": "VariableDeclaration",
                  "scope": 36769,
                  "src": "948:15:68",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 36762,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "948:7:68",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "947:17:68"
            },
            "returnParameters": {
              "id": 36768,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 36767,
                  "mutability": "mutable",
                  "name": "data",
                  "nameLocation": "1013:4:68",
                  "nodeType": "VariableDeclaration",
                  "scope": 36769,
                  "src": "988:29:68",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_PoolMemberNFTData_$36730_memory_ptr",
                    "typeString": "struct IPoolMemberNFT.PoolMemberNFTData"
                  },
                  "typeName": {
                    "id": 36766,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 36765,
                      "name": "PoolMemberNFTData",
                      "nameLocations": [
                        "988:17:68"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 36730,
                      "src": "988:17:68"
                    },
                    "referencedDeclaration": 36730,
                    "src": "988:17:68",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_PoolMemberNFTData_$36730_storage_ptr",
                      "typeString": "struct IPoolMemberNFT.PoolMemberNFTData"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "987:31:68"
            },
            "scope": 36770,
            "src": "915:104:68",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 36771,
        "src": "111:910:68",
        "usedErrors": [
          36733,
          36735,
          36737,
          36739,
          36778,
          36780,
          36782,
          36784,
          36786,
          36788,
          36790,
          36792
        ],
        "usedEvents": [
          2672,
          2681,
          2690,
          36797
        ]
      }
    ],
    "src": "32:989:68"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.26+commit.8a97fa7a.Linux.g++"
  },
  "networks": {},
  "schemaVersion": "3.4.16",
  "updatedAt": "2024-08-06T17:02:39.658Z",
  "devdoc": {
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
      },
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
      },
      "MetadataUpdate(uint256)": {
        "details": "This event comes from https://eips.ethereum.org/EIPS/eip-4906",
        "params": {
          "tokenId": "the id of the token that should have its metadata updated"
        }
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
      },
      "balanceOf(address)": {
        "details": "Returns the number of tokens in ``owner``'s account."
      },
      "getApproved(uint256)": {
        "details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "getTokenId(address,address)": {
        "details": "For PoolAdminNFT, `account` is admin and for PoolMemberNFT, `account` is member"
      },
      "isApprovedForAll(address,address)": {
        "details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
      },
      "name()": {
        "details": "Returns the token collection name."
      },
      "ownerOf(uint256)": {
        "details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
      },
      "setApprovalForAll(address,bool)": {
        "details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      },
      "symbol()": {
        "details": "Returns the token collection symbol."
      },
      "tokenURI(uint256)": {
        "details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "POOL_MEMBER_NFT_NO_ZERO_POOL()": [
        {
          "notice": "Errors ///"
        }
      ]
    },
    "events": {
      "MetadataUpdate(uint256)": {
        "notice": "Informs third-party platforms that NFT metadata should be updated"
      }
    },
    "kind": "user",
    "methods": {
      "getTokenId(address,address)": {
        "notice": "Gets the token id"
      },
      "poolMemberDataByTokenId(uint256)": {
        "notice": "View Functions ///"
      }
    },
    "version": 1
  }
}